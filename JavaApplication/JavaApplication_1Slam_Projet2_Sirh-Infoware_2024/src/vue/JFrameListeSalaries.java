package vue;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modele.dao.DaoSalarie;
import modele.metier.Salarie;
import modele.metier.Service;

/**
 * GUI liste des salariés par service
 *
 * @author btssio
 */
public class JFrameListeSalaries extends javax.swing.JFrame {

    // les modèles 
    private DefaultTableModel modeleJTableLesSalaries;
    private DefaultComboBoxModel modeleJComboLesServices;
    private Salarie leSalarieSelectionne = null;
    /**
     * Creates new form JFrameListeSalariess
     */
    public JFrameListeSalaries() {
        initComponents();
        this.setLocation(150, 150);
        // Définition du nouveau modèle de JComboBox
        modeleJComboLesServices = new DefaultComboBoxModel();
        jComboBoxLesServices.setModel(modeleJComboLesServices);
        // Définition du nouveau modèle de JTable :
        //      - rendre les cellules non éditables
        modeleJTableLesSalaries = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int iRowIndex, int iColumnIndex) {
                return false;
            }
        };
        //      - affecter le modèle au composant JTable       
        jTableSalaries.setModel(modeleJTableLesSalaries);
        //      - configurer les colonnes
        String[] titres = {"Code", "Nom", "Prenom", "Date naiss.", "Date emb.", "Fonction", "Service"};
        modeleJTableLesSalaries.setColumnIdentifiers(titres);
        //      - adapter la largeur des colonnes
        jTableSalaries.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableSalaries.getColumnModel().getColumn(3).setPreferredWidth(90);
        jTableSalaries.getColumnModel().getColumn(4).setPreferredWidth(90);
        jTableSalaries.getColumnModel().getColumn(5).setPreferredWidth(150);
        jTableSalaries.getColumnModel().getColumn(6).setPreferredWidth(100);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSalaries = new javax.swing.JTable();
        jComboBoxLesServices = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButtonQuitter = new javax.swing.JButton();
        jButtonConsulter = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("InfoWare - SIRH");

        jLabel1.setText("Liste des salariés par service");

        jTableSalaries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSalaries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSalariesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSalaries);

        jComboBoxLesServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLesServicesActionPerformed(evt);
            }
        });

        jLabel2.setText("Service :");

        jButtonQuitter.setText("Quitter");
        jButtonQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitterActionPerformed(evt);
            }
        });

        jButtonConsulter.setText("Consulter");
        jButtonConsulter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsulterActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxLesServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(241, 241, 241))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonConsulter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonQuitter)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxLesServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSupprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonQuitter)
                    .addComponent(jButtonConsulter))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableSalariesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSalariesMouseClicked
        // Un salarié sélectionné ?
        if (jTableSalaries.getSelectedRow() > -1) {
            String codeSalarie = (String) jTableSalaries.getValueAt(jTableSalaries.getSelectedRow(), 0);
            // Lire le salarié sélectionné dans la BDD
            try {
                this.leSalarieSelectionne = DaoSalarie.getOneById(codeSalarie);
                System.out.println("Salarié sélexctionné :\n" + leSalarieSelectionne.toString());
            } catch (Exception ex) {
                System.out.println("JFrameListeSalaries - pb lecture salarie sélectionné : " + ex.getMessage());
            }
        }else{
            this.leSalarieSelectionne = null;
        }

    }//GEN-LAST:event_jTableSalariesMouseClicked

    private void jButtonQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitterActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitterActionPerformed

    private void jComboBoxLesServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLesServicesActionPerformed
        // Récupérer le code du service concerné
        int codeServiceSelectionne = ((Service) modeleJComboLesServices.getSelectedItem()).getCode();
        // Lire les salariés du service
        List<Salarie> lesSalaries = null;
        try {
            // Si aucun service n'a été sélectionné (1ère option de la liste déroulante, de code 0)
            if (codeServiceSelectionne == 0) {
                // Sélectionner tous les salariés
                lesSalaries = DaoSalarie.getAll();
            } else {
                // Sélectionner les salariés du service sélectionné
                lesSalaries = DaoSalarie.getAllByService(codeServiceSelectionne);
            }
        } catch (Exception ex) {
            System.out.println("JFrameListeSalaries - pb lecture liste salaries : " + ex.getMessage());
        }
        remplirJTableSalaries(lesSalaries);
    }//GEN-LAST:event_jComboBoxLesServicesActionPerformed

    /**
     * Handler du bouton Consulter le salarié sélectionné
     *
     * @param evt
     */
    private void jButtonConsulterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsulterActionPerformed
        // Un salarié sélectionné ?
        if (leSalarieSelectionne != null) {
            try {
                // instanciation d'une fenêtre modale (true)
                JDialogFicheSalarie jDialogUnSalarie = new JDialogFicheSalarie(this, true);
                // Communication des données du salarié à cette fenêtre
                jDialogUnSalarie.setLeSalarie(leSalarieSelectionne);
                // Le formulaire se rempli et est affiché
                jDialogUnSalarie.remplirFormulaire();
                jDialogUnSalarie.modeVisualiser();
                jDialogUnSalarie.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(JFrameListeSalaries.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFrameListeSalaries.class.getName()).log(Level.SEVERE, null, ex);
            }
                
        }else{
            JOptionPane.showMessageDialog(
                    this, 
                    "Sélectionner un salarié auparavant", 
                    "Attention", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConsulterActionPerformed

    /**
     * Handler du bouton Supprimer le salarié sélectionné
     *
     * @param evt
     */
    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // Un salarié sélectionné ?
        if (leSalarieSelectionne != null) {
            try {
                int reponse = JOptionPane.showConfirmDialog(
                        this,
                        "Confirmez-vous la suppression du salarié " + leSalarieSelectionne.getPrenom() + " " + leSalarieSelectionne.getNom() + " ?",
                        "Suppression salarié",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (reponse == JOptionPane.YES_OPTION) {
                    // Supprimer le salarié dans la base de données
                    int nb = DaoSalarie.deleteById(leSalarieSelectionne.getCode());
                    if (nb == 1) {
                        // le salarié a effectivement été supprimé
                        // il faut actualiser la liste des salariés
                        // Attention, il y a peut-être un filtrage en cours sur les services
                        int codeServiceSelectionne = ((Service) modeleJComboLesServices.getSelectedItem()).getCode();
                        // Lire les salariés du service
                        List<Salarie> lesSalaries;
                        // Si aucun service n'a été sélectionné (1ère option de la liste déroulante, de code 0)
                        if (codeServiceSelectionne == 0) {
                            lesSalaries = DaoSalarie.getAll();
                        } else {
                            lesSalaries = DaoSalarie.getAllByService(codeServiceSelectionne);
                        }
                        this.remplirJTableSalaries(lesSalaries);
                    }
                }
            } catch (SQLException | IOException ex) {
                System.out.println("JFrameListeSalaries - pb suppression salarie sélectionné : " + ex.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(
                    this, 
                    "Sélectionner un salarié auparavant", 
                    "Attention", 
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameListeSalaries.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameListeSalaries().setVisible(true);
            }
        });
    }

    // SERVICES
    public void remplirJComBoxServices(List<Service> desServices) {
        modeleJComboLesServices.removeAllElements();
        // La première option permet de sélectionner tous les salariés
        modeleJComboLesServices.addElement(new Service(0, "*** Tous services ***"));
        // Options suivantes : une par service
        for (Service unService : desServices) {
            modeleJComboLesServices.addElement(unService);
        }
    }

    public void remplirJTableSalaries(List<Salarie> desSalaries) {
        modeleJTableLesSalaries.setRowCount(0);
        // Une ligne de la table est un tableau d'objets
        Object[] rowData = new Object[jTableSalaries.getColumnModel().getColumnCount()];
        for (Salarie unSalarie : desSalaries) {
            rowData[0] = unSalarie.getCode();
            rowData[1] = unSalarie.getNom();
            rowData[2] = unSalarie.getPrenom();
            rowData[3] = unSalarie.getDateNaiss();
            rowData[4] = unSalarie.getDateEmbauche();
            rowData[5] = unSalarie.getFonction();
            if (unSalarie.getService() != null) {
                rowData[6] = unSalarie.getService().getDesignation();
            } else {
                rowData[6] = "";
            }

            modeleJTableLesSalaries.addRow(rowData);
        }
    }
      
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsulter;
    private javax.swing.JButton jButtonQuitter;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox jComboBoxLesServices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSalaries;
    // End of variables declaration//GEN-END:variables
}
